# -*- coding: utf-8 -*-
"""Decision Tree

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jZ_v1wOiFD5en0hv2VWAX50uTerOPzDI
"""



"""IMPORTANDO AS BIBLIOTECAS"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""IMPORTANDO A BASE DE DADOS"""

df = pd.read_csv('/content/Carros_data.csv', sep=';')
# IMPORTA A BASE DE DADOS

df.head()
# VERIFICAR A BASE DE DADOS

df.info()
# ANALISAR AS VARIÁVEIS E O NÚMERO DE OBSERVAÇÕES

df = df.drop(columns=['Car_Name'])
#RETIREI O STRING CAR_NAME

"""EXPLORAR OS DADOS"""

sns.pairplot(df,hue='Owner',palette='Set1')
# TENTAR VERIFICAR PADRÕES NA BASE DE DADOS

"""DIVISÃO TREINO E TESTE"""

from sklearn.model_selection import train_test_split
# IMPORTA O TESTE E TREINO

X = df.drop('Owner',axis=1)
y = df['Owner']
# DEFINIR VARIÁVEIS

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)
# DEFINIR TAMANHO

"""RODAR O MODELO"""

from sklearn.tree import DecisionTreeClassifier
# IMPORTAR

dtree = DecisionTreeClassifier()
# DEFININDO

dtree.fit(X_train,y_train)
# RODANDO

"""PREVISÃO"""

predictions = dtree.predict(X_test)
# PREVISAO

from sklearn.metrics import classification_report,confusion_matrix
# IMPORTANDO

print(classification_report(y_test,predictions))
# PRINTANDO

print(confusion_matrix(y_test,predictions))
# GERAR A MATRIZ

# GERAR UMA MATRIZ MAIS ATRATIVA
cm = confusion_matrix(y_test,predictions)
# Criar matriz de confusão

labels = ['Negado', 'Aprovado']
cm_df = pd.DataFrame(cm, index=labels, columns=labels)
# Criar um DataFrame para a matriz de confusão (opcional, para visualização melhorada)

plt.figure(figsize=(8, 6))
sns.heatmap(cm_df, annot=True, fmt="d", cmap="Blues", cbar=False, linewidths=0.5)
plt.title("Matriz de Confusão", fontsize=16)
plt.xlabel("Previsto", fontsize=12)
plt.ylabel("Real", fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10, rotation=0)
plt.show()
# Visualizar a matriz de confusão com seaborn

"""VIZUALISAR A ARVORE"""

from IPython.display import Image
from six import StringIO  # Corrige a importação do módulo six
from sklearn.tree import export_graphviz
import pydot

# Certifique-se de definir o DataFrame df antes de usar
# Exemplo de definição:
# import pandas as pd
# df = pd.DataFrame(...)  # Substitua pelos seus dados

# Extraindo os nomes das features
features = list(df.columns[1:])
print(features)

#GERAR GRAFICOS
dot_data = StringIO()
export_graphviz(dtree, out_file=dot_data,feature_names=features,filled=True,rounded=True)

graph = pydot.graph_from_dot_data(dot_data.getvalue())
Image(graph[0].create_png())